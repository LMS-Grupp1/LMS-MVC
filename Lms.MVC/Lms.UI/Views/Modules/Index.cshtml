@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager
@model ListModuleViewModel


@{ 
    Layout = "ModuleActivityLayout";
    ViewData["CourseId"] = Model.CourseId;
    ViewData["Title"] = Model.CourseTitle;

}

<div class="row">
    <div class="col">
        <ol class="breadcrumb">
            <li class="breadcrumb-item active" aria-current="page"><span>@Model.CourseTitle</span></li>
        </ol>
    </div>
</div>
@if (User.IsInRole("Student"))
	{
<div class="sidebar">
    @await Component.InvokeAsync("StudentStatisticsBar", new { CMAType = "course", courseId = (int)Model.CourseId, moduleId = (int)Model.Id, userId=userManager.GetUserId(User) })
</div>
	}
<div class="content">

<div class="container">



    <h1>@Model.CourseTitle</h1>
    @if (User.IsInRole("Admin") || User.IsInRole("Teacher"))
    {
        <p>
            <a asp-action="Create" asp-route-id=@Model.CourseId class="btn btn-primary mr-3">Create New Module</a>
            @if (!User.IsInRole("Admin"))
            {
                <a asp-area="Identity" asp-page="/Account/Register" asp-route-CourseId="@Model.CourseId" class="btn btn-primary mr-3">Add a student to this course</a> }
            else
            {
                <a asp-area="Identity" asp-page="/Account/Register" asp-route-CourseId="@Model.CourseId" class="btn btn-primary mr-3">Add a user to this course</a>
            }

            <a asp-controller="Courses" asp-action="Edit" asp-route-id="@Model.CourseId" class="btn btn-primary">Edit Course</a>
        </p>
    }
    </div>

<div class="container">
    <div class="row">
        @if (Model.ModuleList.Count() != 0)
        {
            <div class="card__wrap--outer">
                @foreach (var module in Model.ModuleList)
                {
                    <div class="card__wrap--inner">
                        <div class="card">
                            <a asp-controller="Activities" asp-action="Index" asp-route-id="@module.Id">
                                <div class="card__item">
                                    <h2>@module.Title</h2>
                                </div>
                                <div class="card__item flexible">
                                    <small>@module.Description</small>
                                </div>
                                <div class="card__item">
                                    <small>@module.StartDate.Date.ToLocalTime() - @module.EndDate.Date.ToLocalTime()</small>
                                </div>
                            </a>
                        </div>
                    </div>
                }
            </div>

        }
        else
        {
            <p>No modules in this course</p>
        }
    </div>
    <div class="row">
        <div class="col">Files:<br />@await Component.InvokeAsync("ListFiles", new { CMAType = "course", id = Model.CourseId.ToString(), userId = userManager.GetUserAsync(User).Result.Id })</div>
    </div>

    @await Component.InvokeAsync("UploadFile", new { userId = userManager.GetUserAsync(User).Result.Id, Id = Model.CourseId, CMAType = "course" })

</div>
    </div>
    </div>
   